import asyncio
import aiosqlite
import os
import re
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove)
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv(dotenv_path="D:/web/python/main.env")
API_TOKEN = os.getenv("API_TOKEN")
print("API_TOKEN:", API_TOKEN)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

MAIN_ADMIN_ID = 863294823

user_booking = {}

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î ---
async def init_db():
    async with aiosqlite.connect("carwash.db") as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS programs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                duration INTEGER -- –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                username TEXT,
                phone_number TEXT,
                program_id INTEGER,
                car_number TEXT,
                booking_datetime TEXT,
                FOREIGN KEY(program_id) REFERENCES programs(id)
            )
        """)
        await db.execute("""
            CREATE TABLE IF NOT EXISTS admins (
                user_id INTEGER PRIMARY KEY
            )
        """)
        await db.commit()

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
async def get_programs():
    async with aiosqlite.connect("carwash.db") as db:
        async with db.execute("SELECT id, name, duration FROM programs") as cursor:
            return await cursor.fetchall()

async def is_admin(user_id: int) -> bool:
    if user_id == MAIN_ADMIN_ID:
        return True
    async with aiosqlite.connect("carwash.db") as db:
        async with db.execute("SELECT 1 FROM admins WHERE user_id=?", (user_id,)) as cursor:
            return bool(await cursor.fetchone())

async def get_available_hours(program_id, booking_date):
    async with aiosqlite.connect("carwash.db") as db:
        cursor = await db.execute("SELECT duration FROM programs WHERE id=?", (program_id,))
        row = await cursor.fetchone()
        if not row:
            return []
        duration = row[0]

        all_hours = [datetime.combine(booking_date, datetime.min.time()) + timedelta(hours=h) for h in range(9, 19)]

        cursor = await db.execute("""
            SELECT booking_datetime, p.duration
            FROM bookings b
            LEFT JOIN programs p ON b.program_id = p.id
            WHERE DATE(booking_datetime)=?
        """, (booking_date.isoformat(),))   # —Ç—É—Ç isoformat() –¥–∞—î YYYY-MM-DD

        booked = await cursor.fetchall()
        available = []
        for start in all_hours:
            end = start + timedelta(minutes=duration)
            conflict = False
            for b_dt, b_dur in booked:
                b_start = datetime.strptime(b_dt, "%Y-%m-%d %H:%M:%S")  # –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
                b_end = b_start + timedelta(minutes=b_dur)
                if not (end <= b_start or start >= b_end):
                    conflict = True
                    break
            if not conflict:
                available.append(start.strftime("%H:%M"))
        return available


# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç
def generate_date_buttons(days_ahead=7):
    today = datetime.today().date()
    buttons = [[KeyboardButton(text=(today + timedelta(days=i)).strftime("%d.%m.%Y"))] for i in range(days_ahead)]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# --- –ö–æ–º–∞–Ω–¥–∏ ---
@router.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –º–∏–π–∫—É. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

@router.message(Command("help"))
async def help_command(message: types.Message):
    base_text = (
        "üìå –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n\n"
        "/start - –ø–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/programs - –ø—Ä–æ–≥—Ä–∞–º–∏ –º–∏–π–∫–∏\n"
        "/book - –∑–∞–ø–∏—Å–∞—Ç–∏ –∞–≤—Ç–æ\n"
    )
    admin_text = ""
    if await is_admin(message.from_user.id):
        admin_text = (
            "\nüõ† –ê–¥–º—ñ–Ω-–∫–æ–º–∞–Ω–¥–∏:\n"
            "/show_booking [–¥–∞—Ç–∞|user_id|–Ω–æ–º–µ—Ä –∞–≤—Ç–æ] - –ø–æ–∫–∞–∑–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
            "/edit <ID> <–¥–∞—Ç–∞> <–≥–æ–¥–∏–Ω–∞> - –∑–º—ñ–Ω–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
            "/delete <ID> - –≤–∏–¥–∞–ª–∏—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
            "/add_program <–Ω–∞–∑–≤–∞> <–≥–æ–¥:—Ö–≤:—Å–µ–∫>\n"
            "/add_admin <user_id>\n"
            "/del_admin <user_id>\n"
            "/admins - —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤\n"
        )
    await message.answer(base_text + admin_text)

@router.message(Command("programs"))
async def show_programs(message: types.Message):
    programs = await get_programs()
    if not programs:
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.")
        return
    text = "–ü—Ä–æ–≥—Ä–∞–º–∏ –º–∏–π–∫–∏:\n\n"
    for p in programs:
        text += f"{p[0]} - {p[1]} ({p[2]} —Ö–≤)\n"
    await message.answer(text)

@router.message(Command("add_admin"))
async def add_admin(message: types.Message):
    if message.from_user.id != MAIN_ADMIN_ID:
        await message.answer("‚ùå –õ–∏—à–µ –≥–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤")
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_admin <user_id>")
        return
    try:
        user_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
        return
    async with aiosqlite.connect("carwash.db") as db:
        try:
            await db.execute("INSERT INTO admins (user_id) VALUES (?)", (user_id,))
            await db.commit()
            await message.answer(f"‚úÖ {user_id} –¥–æ–¥–∞–Ω–∏–π —É –∞–¥–º—ñ–Ω–∏")
        except aiosqlite.IntegrityError:
            await message.answer("‚ùå –í–∂–µ —î –∞–¥–º—ñ–Ω–æ–º")

@router.message(Command("del_admin"))
async def del_admin(message: types.Message):
    if message.from_user.id != MAIN_ADMIN_ID:
        await message.answer("‚ùå –õ–∏—à–µ –≥–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω –º–æ–∂–µ –≤–∏–¥–∞–ª—è—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤")
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /del_admin <user_id>")
        return
    try:
        target_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå user_id –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º")
        return
    async with aiosqlite.connect("carwash.db") as db:
        await db.execute("DELETE FROM admins WHERE user_id=?", (target_id,))
        await db.commit()
    await message.answer(f"üóë {target_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∞–¥–º—ñ–Ω—ñ–≤")

@router.message(Command("admins"))
async def list_admins(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    async with aiosqlite.connect("carwash.db") as db:
        rows = await db.execute_fetchall("SELECT user_id FROM admins")

    # –î–æ–¥–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫
    admins_ids = [MAIN_ADMIN_ID] + [r[0] for r in rows]

    text = "üìã –ê–¥–º—ñ–Ω–∏:\n"
    for admin_id in admins_ids:
        try:
            user = await bot.get_chat(admin_id)
            username = f"@{user.username}" if user.username else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        except Exception:
            username = "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        text += f"{admin_id} | {username}\n"

    await message.answer(text)

@router.message(Command("show_booking"))
async def show_booking(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    args = message.text.split(maxsplit=1)

    async with aiosqlite.connect("carwash.db") as db:
        rows = []
        if len(args) == 1:
            # üîπ –ë–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ‚Üí –≤—Å—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
            cursor = await db.execute("""
                SELECT b.id, b.user_id, b.username, b.phone_number, p.name, b.car_number, b.booking_datetime
                FROM bookings b
                LEFT JOIN programs p ON b.program_id = p.id
                ORDER BY booking_datetime
            """)
            rows = await cursor.fetchall()
        else:
            query = args[1].strip()
            # üîπ –Ø–∫—â–æ –¥–∞—Ç–∞
            try:
                date = datetime.strptime(query, "%d.%m.%Y").date()
                cursor = await db.execute("""
                    SELECT b.id, b.user_id, b.username, b.phone_number, p.name, b.car_number, b.booking_datetime
                    FROM bookings b
                    LEFT JOIN programs p ON b.program_id = p.id
                    WHERE DATE(booking_datetime)=?
                    ORDER BY booking_datetime
                """, (date.isoformat(),))
                rows = await cursor.fetchall()
            except ValueError:
                # üîπ –Ø–∫—â–æ user_id
                if query.isdigit():
                    cursor = await db.execute("""
                        SELECT b.id, b.user_id, b.username, b.phone_number, p.name, b.car_number, b.booking_datetime
                        FROM bookings b
                        LEFT JOIN programs p ON b.program_id = p.id
                        WHERE b.user_id=?
                        ORDER BY booking_datetime
                    """, (int(query),))
                    rows = await cursor.fetchall()
                else:
                    # üîπ –Ø–∫—â–æ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ
                    cursor = await db.execute("""
                        SELECT b.id, b.user_id, b.username, b.phone_number, p.name, b.car_number, b.booking_datetime
                        FROM bookings b
                        LEFT JOIN programs p ON b.program_id = p.id
                        WHERE b.car_number=?
                        ORDER BY booking_datetime
                    """, (query.upper(),))
                    rows = await cursor.fetchall()

    if not rows:
        await message.answer("üì≠ –ù–µ–º–∞—î –±—Ä–æ–Ω—é–≤–∞–Ω—å –∑–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º")
        return

    text = "üìã –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n\n"
    for r in rows:
        booking_time = datetime.fromisoformat(r[6])
        text += (
            f"ID: {r[0]}\n"
            f"üë§ UserID: {r[1]} | @{r[2]}\n"
            f"üìû {r[3]}\n"
            f"üöó {r[5]}\n"
            f"üìÖ {booking_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"üßæ –ü—Ä–æ–≥—Ä–∞–º–∞: {r[4]}\n"
            f"---\n"
        )

    await message.answer(text)

@router.message(Command("delete"))
async def delete_booking(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    parts = message.text.split()
    if len(parts) != 2 or not parts[1].isdigit():
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /delete <ID>")
        return

    booking_id = int(parts[1])
    async with aiosqlite.connect("carwash.db") as db:
        cursor = await db.execute("SELECT id FROM bookings WHERE id=?", (booking_id,))
        row = await cursor.fetchone()
        if not row:
            await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î")
            return
        await db.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
        await db.commit()
    await message.answer(f"üóë –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è {booking_id} –≤–∏–¥–∞–ª–µ–Ω–æ")

@router.message(Command("edit"))
async def edit_booking(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return

    parts = message.text.split()
    if len(parts) != 4:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /edit <ID> <–¥–∞—Ç–∞> <–≥–æ–¥–∏–Ω–∞>\n–ü—Ä–∏–∫–ª–∞–¥: /edit 5 25.08.2025 14:30")
        return

    try:
        booking_id = int(parts[1])
        new_date = datetime.strptime(parts[2], "%d.%m.%Y").date()
        new_time = datetime.strptime(parts[3], "%H:%M").time()
        new_dt = datetime.combine(new_date, new_time)
    except Exception as e:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –∞–±–æ —á–∞—Å—É")
        return

    async with aiosqlite.connect("carwash.db") as db:
        cursor = await db.execute("SELECT id FROM bookings WHERE id=?", (booking_id,))
        row = await cursor.fetchone()
        if not row:
            await message.answer("‚ùå –¢–∞–∫–æ–≥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î")
            return
        await db.execute("UPDATE bookings SET booking_datetime=? WHERE id=?", (new_dt.isoformat(), booking_id))
        await db.commit()
    await message.answer(f"‚úè –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è {booking_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_dt.strftime('%d.%m.%Y %H:%M')}")


@router.message(Command("add_program"))
async def add_program(message: types.Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤")
        return
    parts = message.text.split()
    if len(parts) < 3:
        await message.answer("‚ö† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_program <–Ω–∞–∑–≤–∞> <–≥–æ–¥:—Ö–≤:—Å–µ–∫>")
        return
    duration_str = parts[-1]
    try:
        h, m, s = map(int, duration_str.split(":"))
        duration_minutes = h*60 + m + s//60
    except:
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")
        return
    name = " ".join(parts[1:-1])
    async with aiosqlite.connect("carwash.db") as db:
        try:
            await db.execute("INSERT INTO programs (name, duration) VALUES (?, ?)", (name, duration_minutes))
            await db.commit()
            await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ '{name}' ({duration_minutes} —Ö–≤)")
        except aiosqlite.IntegrityError:
            await message.answer("‚ùå –ü—Ä–æ–≥—Ä–∞–º–∞ –≤–∂–µ —ñ—Å–Ω—É—î")

# --- –ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ---
@router.message(Command("book"))
async def book_program(message: types.Message):
    programs = await get_programs()
    if not programs:
        await message.answer("–ü—Ä–æ–≥—Ä–∞–º–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ.")
        return
    buttons = [[KeyboardButton(text=f"{p[0]} - {p[1]}")] for p in programs]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É:", reply_markup=keyboard)
    user_booking[message.from_user.id] = {}

@router.message()
async def process_booking(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_booking:
        return
    data = user_booking[user_id]

    # 1Ô∏è‚É£ –ü—Ä–æ–≥—Ä–∞–º–∞
    if "program_id" not in data:
        try:
            data["program_id"] = int(message.text.split(" - ")[0])
        except:
            await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –∫–Ω–æ–ø–∫–æ—é.")
            return
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:", reply_markup=generate_date_buttons())
        return

    # 2Ô∏è‚É£ –î–∞—Ç–∞
    if "booking_date" not in data:
        try:
            date = datetime.strptime(message.text, "%d.%m.%Y").date()
            if date < datetime.today().date():
                raise ValueError
            data["booking_date"] = date
        except:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞")
            return

        hours = await get_available_hours(data["program_id"], data["booking_date"])
        if not hours:
            await message.answer("‚ùå –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –≥–æ–¥–∏–Ω, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É", reply_markup=generate_date_buttons())
            data.pop("booking_date")
            return

        buttons = [[KeyboardButton(text=h)] for h in hours]
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:", reply_markup=ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True))
        return


    # 3Ô∏è‚É£ –ß–∞—Å
    if "booking_time" not in data:
        hours = await get_available_hours(data["program_id"], data["booking_date"])
        if message.text not in hours:
            await message.answer("‚ùå –¶—è –≥–æ–¥–∏–Ω–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–∞")
            return
        data["booking_time"] = message.text
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–≤—Ç–æ:", reply_markup=ReplyKeyboardRemove())
        return

    # 4Ô∏è‚É£ –ê–≤—Ç–æ
    if "car_number" not in data:
        if not re.match(r"^[A-Z–ê-–Ø–Ü–á–Ñ]{2}\d{4}[A-Z–ê-–Ø–Ü–á–Ñ]{2}$", message.text.upper()):
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–∫–ª–∞–¥: AA1234BB")
            return
        data["car_number"] = message.text.upper()
        kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìû –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]], resize_keyboard=True)
        await message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=kb)
        return

    # 5Ô∏è‚É£ –¢–µ–ª–µ—Ñ–æ–Ω
    if "phone_number" not in data:
        if message.contact and message.contact.phone_number:
            data["phone_number"] = message.contact.phone_number
        else:
            await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º")
            return

        booking_dt = datetime.combine(data["booking_date"], datetime.strptime(data["booking_time"], "%H:%M").time())
        booking_str = booking_dt.strftime("%Y-%m-%d %H:%M:%S")
        username = message.from_user.username or "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        async with aiosqlite.connect("carwash.db") as db:
            await db.execute("""
                INSERT INTO bookings (user_id, username, phone_number, program_id, car_number, booking_datetime)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, username, data["phone_number"], data["program_id"], data["car_number"], booking_str))
            await db.commit()

        await message.answer(
            f"‚úÖ –ó–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ:\n"
            f"üìÖ {data['booking_date']} ‚è∞ {data['booking_time']}\n"
            f"üöó {data['car_number']}\n"
            f"üìû {data['phone_number']}",
            reply_markup=ReplyKeyboardRemove()
        )
        user_booking.pop(user_id)

# --- –°—Ç–∞—Ä—Ç ---
async def main():
    await init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
